apiVersion: v1
kind: Secret
metadata:
  name: {{ include "emqx.fullname" . }}-auth
  labels:
    {{- include "emqx.labels" . | nindent 4 }}
type: Opaque
data:
  admin-username: {{ .Values.auth.username | b64enc | quote }}
  admin-password: {{ randAlphaNum 16 | b64enc | quote }}
  erlang-cookie: {{ randAlphaNum 32 | b64enc | quote }}

---
# Job pour initialiser EMQX avec les credentials
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "emqx.fullname" . }}-init
  labels:
    {{- include "emqx.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: {{ include "emqx.fullname" . }}-init
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init
        image: curlimages/curl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Waiting for EMQX to be ready..."
          # Test avec différents endpoints possibles
          READY=false
          TIMEOUT=300
          COUNT=0
          
          while [ "$READY" = false ] && [ $COUNT -lt $TIMEOUT ]; do
            # Essayer le pod direct via StatefulSet
            if curl -f http://{{ include "emqx.fullname" . }}-0.{{ include "emqx.fullname" . }}.default.svc.cluster.local:{{ .Values.service.ports.dashboard }}/status 2>/dev/null; then
              READY=true
              echo "EMQX ready via StatefulSet service!"
              break
            fi
            
            # Essayer le service LoadBalancer
            if curl -f http://{{ include "emqx.fullname" . }}-lb:{{ .Values.service.ports.dashboard }}/status 2>/dev/null; then
              READY=true
              echo "EMQX ready via LoadBalancer service!"
              break
            fi
            
            echo "EMQX not ready, waiting... ($COUNT/300)"
            sleep 10
            COUNT=$((COUNT + 10))
          done
          
          if [ "$READY" = false ]; then
            echo "Timeout waiting for EMQX to be ready"
            exit 1
          fi
          
          # Récupération des credentials
          USERNAME=$(echo $ADMIN_USERNAME | base64 -d)
          PASSWORD=$(echo $ADMIN_PASSWORD | base64 -d)
          
          echo "Admin credentials configured:"
          echo "Username: $USERNAME"
          echo "Password: $PASSWORD"
        env:
        - name: ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ include "emqx.fullname" . }}-auth
              key: admin-username
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "emqx.fullname" . }}-auth
              key: admin-password